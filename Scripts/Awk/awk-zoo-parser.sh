#!/usr/bin/sh
######################################################################
# Author:      Lakshman Brodie
# Date:        5th October 2021
# Description: The awk programming language is very good for parsing text
#              and this program parses the output of the zoo simulation programs
#              for testing and reporting purposes.  This script could be called
#              from Jenkinsfile as part of the testing stage.  I expect I will be writing
#              a Python version of this program as well.
#
#              The purpose of this script is to report on the final status of each
#              animal.  The output files all differ so we can't have a generic parser.
#              The solution is to have functions for each logfile.  The header
#              of the functions tells you more.
#####################################################################

SCRIPT=$(basename ${0})

if [ -z "${BASE_DIR}" ]
then
    BASE_DIR=${HOME}/src/lab1301-git/src
    echo "${SCRIPT}: BASE_DIR not set.  Setting BASE_DIR to '${BASE_DIR}'... "
else
    echo "${SCRIPT}: Env var BASE_DIR is set to '${BASE_DIR}'"
fi

if [ ! -z "${1}" ]
then
    echo "${SCRIPT}: We have been passed an arg ('${1}')"
    echo "${SCRIPT}: Using file '${INPUT}'... "
    INPUT=${1}
else
    INPUT=${BASE_DIR}/C++/zooVisitorPattern/zooVisitor.out
    echo "${SCRIPT}: *** WARNING **** No input file arg passed!"
    echo "${SCRIPT}: Setting input file to default of '${INPUT}'"
fi

if [ ! -r "${INPUT}" ]
then 
    echo "${SCRIPT}: **** FATAL - The specified input file '${INPUT}' is not accessible ****"
    exit 1
fi

echo "${SCRIPT}: Using input file '${INPUT}'... "

awk '

    ############################################################
    # Function:    zooVisitorPattern_C_PlusPlus()
    # Description: Process the output file, zooVisitor.out,
    #              generated by zooVisitor.cpp
    # Arguments:   None              
    # Returns:     0 - Success
    #              1 - Failure 
    ############################################################
    function zooVisitorPattern_C_PlusPlus() {
        for (a in initial_zoo_visitor) {
            start_pos=initial_zoo_visitor[a]
            # The if statement below is a safety measure as we do not want to
            # go past  array boundary
            if (start_pos < NR) {
                n = split(LINE[start_pos], arrA)
                printf("'${SCRIPT}': We are starting with '%d' healthy '%s'\n\n", arrA[n], arrA[3])
             
            } else {
                printf("\n'${SCRIPT}': *** Warning! %d > %d ***\n", start_pos, NR)
                return(1) 
            }
        }

        # We are only interested in the Status of the animals at the
        # very end and that information is available in this loop
        count=0
        for (i=end_zoo_visitor[b - 1]; i<NR; i++) {
            if ( LINE[i] ~ /-----------/) {
                if (count > 0) {
                    printf("'${SCRIPT}': Animal id: %-2d %-8s has been fed %d times and has an health of <%-2.2f> and is <%s>\n", arrQ[q], arrP[p], arrS[s], arrR[r], arrT[t])
                }
                continue
            } 
            if (LINE[i] ~ / Animal: /) {
                p = split(LINE[i], arrP) 
                count++
            } 
    
            if (LINE[i] ~ / id: /) {
                q = split(LINE[i], arrQ) 
                count++
            } 
    
            if (LINE[i] ~ / Health: /) {
                r = split(LINE[i], arrR) 
                count++
            } 
    
            if (LINE[i] ~ / Feed: /) {
                s = split(LINE[i], arrS) 
                count++
            } 
    
            if (LINE[i] ~ / Status: /) {
                t = split(LINE[i], arrT) 
                count++
            } 
        }
        return(0)
    }

    ############################################################
    # Function:    zoo_java()
    # Description: Process the output file, zoo.out,
    #              generated by zoo.class
    # Arguments:   None              
    # Returns:     0 - Success
    #              1 - Failure 
    ############################################################
    function zoo_java() {

        for (a in a_count_java_zoo) {
            start_pos=a_count_java_zoo[c - 1]
            # The if below 
            if (start_pos > NR) {
                printf("\n'${SCXRIPT}':zoo_java(): start_pos > NR (%d > %d)\n", start_pos, NR)
                return(1) 
            }
            n = split(LINE[start_pos], arrA, "<")
            str=arrA[n]
            p = split(arrA[n], arrB, ">")  
        }
        printf("'${SCRIPT}': We are starting with '%s' healthy animals\n\n", arrB[p - 1])

        # We are only interested in the Status of the animals at the
        # very end and that information is available in this loop
        count=0
        for (i=end_zoo_java[d - 1] + 1; i<NR; i++) {
            if (LINE[i] ~ /^ Name: /) {
                p = split(LINE[i], arrP) 
                name=substr(arrP[p], 2, length(arrP[p]) - 2)
                count++
            } 

            if (LINE[i] ~ /^ Status: /) {
                q = split(LINE[i], arrQ) 
                status=substr(arrQ[q], 2, length(arrQ[q]) - 2)
                count++
            }

            if (LINE[i] ~ /^ Current Health: /) {
                r = split(LINE[i], arrR) 
                currentHealth=substr(arrR[r], 2, length(arrR[r]) - 2)
                count++
            } 

            if (LINE[i] ~ /^ Feed Runs: /) {
                s = split(LINE[i], arrS) 
                feedRun=substr(arrS[s], 2, length(arrS[s]) - 2)
                count++
            } 

            if (LINE[i] ~ /^ Feed Value: /) {
                t = split(LINE[i], arrT) 
                feedValue=substr(arrT[t], 2, length(arrT[t]) - 2)
                count++
            } 
             
            if ( LINE[i] ~ /--------------/) {
                if (count > 0) {
                    printf("Animal id: %-11s has been fed %d times and has an health of <%-2.2f> and is <%s>\n", name, feedRun, currentHealth, status)
                }
                continue
            } 
        }
        return(0)
    }

                                           { LINE[NR] = $0                 }
    ###########################
    # Pattern matching for /C++/zooVisitorPattern/zooVisitor.out
    ###########################
    /^Number of /                          { initial_zoo_visitor[a++] = NR }
    /^Printing vector contents\.\.\.\.$/   { end_zoo_visitor[b++] = NR     }

    ###########################
    # Pattern matching for Eclipse/Java/zooSimulation/target/classes/zoo/zoo.out
    ###########################
    /::animalFactory\(\): Returning new obj/ { a_count_java_zoo[c++] = NR    }
    / Printing attributes of all instance/ { end_zoo_java[d++] = NR        }

    END {

    # Array initial_zoo_visitor contains the line number of all matched patterns that
    # we are interested in

    if (ARGC != 2) {
        printf("'${SCRIPT}': USAGE:\n%s <zoo simulation logfile>\n", ARGV[0])
        exit
    }

    printf("Processing logfile: %s...\n", FILENAME)
    printf("'${SCRIPT}': %s\n", ARGV[1])

    if (b > 0) {
        printf("\n'${SCRIPT}': Detected that the input file is from zooVisitor.cpp...\n\n")
        ret = zooVisitorPattern_C_PlusPlus()

    } else if (c > 0) {
        printf("\n'${SCRIPT}': Detected that the input file is from zoo.java ...\n")
        if (ret = zoo_java() != 0) {
            ret=1;
        }

    } else {
        printf("\n'${SCRIPT}': *** FATAL *** Unsupported file type passed as an argument\n")
        ret=1  
    }

    printf("\n")
    exit(ret)
}' ${INPUT}
