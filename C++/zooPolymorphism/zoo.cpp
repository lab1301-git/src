/*
 * Lakshman Brodie
 * August 2020
 * We have three types of animals that extend the abstract base class animal.
 * This program demonstrates the OO "Is a" relationship via polymorphisim. 
*/

#include <iostream>
#include <memory>
#include <vector>
#include <random>
#include <string>

using namespace std;

const string LIVE = "Live";
const string LAME = "Lame";
const string DEAD = "Dead";

const int ELEPHANT_THRESHOLD = 70;
const int GIRAFFE_THRESHOLD  = 50;
const int MONKEY_THRESHOLD   = 30;
const int HOURLY_MIN_RVAL    = 0;
const int HOURLY_MAX_RVAL    = 20;
const int FEED_MIN_RVAL      = 10;
const int FEED_MAX_RVAL      = 25;

float getRangeNumber(int min, int max);

class animal;

class zoo {
    private:
        int n;

    public:
        zoo() {}
        animal *aptr;
};

class animal {
    private:
        // Access to zoo container is only via getContainer() or loadVector().
        vector<shared_ptr<animal>> zoo; 
        float m_rnum = -1;
        float g_rnum = -1;
        float e_rnum = -1;
        static int idx;
    
    public:
        /*
         * We are using a shared_ptr so there is no memory to free in the dtor.
         * Nevertheless, the dtor should be virtual as this is a virtual base.
        */
        virtual ~animal() { cout << "virtual ~animal::animal() dtor" << endl; };

        /*
         * getContainer() returns a reference to a const vector container.
         * This ensures that the reference, zoo, that getContainer() returns is
         * read only.
        */
        const vector<shared_ptr<animal>>& getContainer() { return zoo; }

        int getIdx() { return ++idx; }

        /*
         * The vector container, zoo, can only be populated by this method and
         * it is available in all inherited classes.
        */
        void loadVector(animal * const obj) {
            zoo.emplace_back(obj);
            return;
        } 

        int getVectorSize() { return zoo.size();     }

        void set_m_rnum(float m_rnum)   { this->m_rnum = m_rnum; }

        virtual float get_m_rnum()  { return m_rnum; }

        void set_g_rnum(float g_rnum)   { this->g_rnum = g_rnum; }

        virtual float get_g_rnum()  { return g_rnum; }

        void set_e_rnum(float e_rnum)   { this->e_rnum = e_rnum; }

        virtual float get_e_rnum()  { return e_rnum; }

        /*
         * Method getRnum() returns the animal specific rnum via the
         * get_m_rnum(), get_g_rnum() & get_e_rnum() methods.
        */
        virtual float getRnum() = 0;

        float getRangeNumber(int min, int max) {
            static bool srand_flg;
            if (srand_flg == 0) {
                srand_flg = 1;
                srand(time(NULL));
            }
            int range = max - min + 1;
            return (rand() % range + min);
        }

        void resetFeedRandomNumbers() {
            /*
             * Everytime an animal is fed,  generate three random values
             * between 10 and 25; one for each type of animal.  But bear in mind
             * that the vector instances have all ready been generated! 
            */
            m_rnum = getRangeNumber(FEED_MIN_RVAL, FEED_MAX_RVAL); 
            g_rnum = getRangeNumber(FEED_MIN_RVAL, FEED_MAX_RVAL); 
            e_rnum = getRangeNumber(FEED_MIN_RVAL, FEED_MAX_RVAL); 
            cout << "Feed random numbers generated by callFeedAnimal::resetFeedRandomNumbers() are:" << endl;
            cout << "    m_rnum=" << get_m_rnum() << "  g_rnum=" << get_g_rnum()
                                        << "  e_rnum=" << get_e_rnum() << endl;
            /*
             * The vector is already populated with instances in which, the
             * random numbers are either not set or are stale.  So we now need
             * to iterate and update each vector instance with the most up to
             * date feed random numbers that we have just generated.
            */
            cout << "** Updating derived instances with the latest feed random numbers... **" << endl;
            cout << endl;
            for (vector<shared_ptr<animal>>::const_iterator it = zoo.begin();
                                                      it != zoo.end(); it++) {
                (*it)->set_m_rnum(get_m_rnum());
                (*it)->set_g_rnum(get_g_rnum());
                (*it)->set_e_rnum(get_e_rnum());
            }
            return;
        }

        virtual void setCount(int count) = 0;

        virtual int getCount() = 0;

        virtual void setHealth(float nhealth) = 0; 

        virtual float getHealth() = 0;

        virtual void setType(string type) = 0;

        virtual string getType() = 0;

        virtual void  setId(int id) = 0;

        virtual int getId() = 0;

        virtual void setStatus(string status) = 0;

        /*
         *
        */
        void feedAnimal() {

            if (getStatus() == DEAD) {
             cout << getType() << " Id: " << getId()
                  << " can't be fed as it is " << getStatus() << "..." << endl;
                return;
            }

            /*
             * Get the animal specific random number polymorphically
            */
            float rnum = getRnum();
            float chealth = 0;
            chealth = getHealth();   // current health
            float nhealth = (getHealth() + ((getHealth() * (rnum/100))));
            nhealth = (nhealth > 100 ? 100 : nhealth);

            cout << "Animal just fed so increasing health of: '" << getType()
                << "' (id="<< getId() << ") by: " << rnum << "% from: "
                                      << chealth << " to: " << nhealth << endl;
            setHealth(nhealth);
            cout << "    Health for id <" << getId() << "> changed to: "
              << getHealth() << ".  Current/old status: " << getStatus() << endl;
            return;
        }

        virtual string getStatus() = 0;

        void printInstance() {
            cout << "        Animal:     " << getType()     << endl;
            cout << "        id:         " << getId()       << endl;
            cout << "        Count:      " << getCount()    << endl;
            cout << "        Health:     " << getHealth()   << endl;
            cout << "        rnumFeed:   " << getRnum()     << endl;
            cout << "        Status:     " << getStatus()   << endl;
            cout << "-----------------------------------"   << endl;
            return;
        }

        virtual void getZooStatus() = 0;

        void adjustHealthDown() {
            float chealth = 0;
            chealth = getHealth();

            if (getStatus() == DEAD) {
                cout << "Animal: " << getId() << " health can't be adjusted as it is already " << getStatus() << endl;
                return;
            }

            float rnum = getRangeNumber(HOURLY_MIN_RVAL, HOURLY_MAX_RVAL);
            float nhealth = (getHealth() - ((getHealth() * (rnum/100))));
            cout << "Reducing health of: '" << getType()
                << "' (id="<< getId() << ") by: " << rnum << "% from: "
                                          << chealth << " to: " << nhealth << endl;
            setHealth(nhealth);
            cout << "    Health for id <" << getId() << "> changed to: "
                        << getHealth() << ". Current/old status: " << getStatus()
                                                                              << endl;
            return;
        }

        virtual void changeStatus() = 0;
};

class elephant : public animal {
    private:
        static int    count;
        float  health;
        string type;
        int    id;
        string status;

    public:
        elephant() { cout << "elephant() default ctor" << endl; }

        elephant(int id) : health(100), type("Elephant"), id(id),
                                                              status(LIVE) {
            setCount(count + 1);
        }

        elephant(const elephant &obj) {
            cout << "elephant(const elephant &obj) - default copy ctor" << endl;
        }

        elephant& operator=(const elephant& obj) {
            cout << "operator=(const elephant &obj) - assignment operator" << endl;
            return *this;
        }

        virtual void setCount(int count) { this->count = count; }

        virtual int getCount() { return count; }

        virtual void setHealth( float nhealth) { this->health = nhealth; }

        virtual float getHealth() { return health; }

        virtual void setType(string type) { this->type = type; }

        virtual string getType() { return type; }

        void setId(int id) { this->id = id; }

        virtual int getId() { return id; }

        virtual void setStatus(string status) { this->status = status; }

        virtual void changeStatus() {
            bool chg = false;
            string old(getStatus());
            
            if (getStatus() == DEAD) {
                cout << "Elephant id: " << getId() << " Status: "
                                                               <<  getStatus() << endl;
                return;
            } else if (getStatus() == LAME && getHealth() < ELEPHANT_THRESHOLD) {
                setStatus(DEAD);
                chg = true; 
            } else if (getStatus() == LAME && getHealth() >= ELEPHANT_THRESHOLD) {
                setStatus(LIVE);
                chg = true; 
            } else if (getHealth() < ELEPHANT_THRESHOLD) {
                setStatus(LAME);
                chg = true; 
            } else {
                cout << "Elephant id: " << getId() << " No change to status" << endl; 
            }

            if (chg == true) 
                cout << "Elephant id: " << getId() << " status changed from: " << old << " to: " <<  getStatus() << endl;
            return;
        };

        virtual float getRnum() {
            return (this->get_e_rnum());
        }

        virtual string getStatus() { return status; }

        virtual void getZooStatus() {
            cout << endl << "---------------------" << endl;
            cout << "Number of Elephants in zoo:  " << count << endl;
            cout << "---------------------" << endl;
            return;
        }
};

class monkey : public animal {
    private:
        static int    count;
        float  health;
        string type;
        int    id;
        string status;

    public:
        monkey(int id) : health(100), type("Monkey"), id(id), status(LIVE) {
            setCount(count + 1);
        }

        monkey() { cout << "monkey() default ctor" << endl; }

        monkey(const monkey &obj) {
            cout << "monkey(const monkey &obj) - default copy ctor" << endl;
        }

        monkey& operator=(const monkey& obj) {
            cout << "operator=(const monkey &obj) - assignment operator" << endl;
            return *this;
        }

        virtual void setCount(int count) { this->count = count; }

        virtual int getCount() { return count; }

        virtual void setHealth( float nhealth) { this->health = nhealth; }

        virtual float getHealth() { return health; }

        virtual void setType(string type) { this->type = type; }

        virtual string getType() { return type; }

        virtual void setId(int id) { this->id = id; }

        virtual int getId() { return id; }

        virtual void setStatus(string status) { this->status = status; }

        virtual void changeStatus() {
            if (getHealth() < MONKEY_THRESHOLD && getStatus() == LIVE) {
                cout << "Monkey id: " << getId() << " status changed from: " << getStatus();
                setStatus(DEAD);
                cout <<  " to: " << getStatus() << endl;
            } else {
                cout << "Monkey id: " << getId() << " No change to status" << endl; 
            }
            return;
        }

        virtual float getRnum() {
            return (this->get_m_rnum());
        }

        virtual string getStatus() { return status; }

        virtual void getZooStatus() {
            cout << endl << "---------------------" << endl;
            cout << "Number of Monkeys in zoo:  " << count << endl;
            cout << "---------------------" << endl;
            return;
        }
};

class giraffe : public animal {
    private:
        static int    count;
        float  health;
        string type;
        int    id;
        string status;

    public:
        giraffe(int id) : health(100), type("Giraffe"), id(id), status(LIVE) {
            setCount(count + 1);
        }

        giraffe() { cout << "giraffe() default ctor" << endl; }

        giraffe(const giraffe &obj) {
            cout << "giraffe(const giraffe &obj) - default copy ctor" << endl;
        }

        giraffe& operator=(const giraffe& obj) {
            cout << "operator=(const giraffe &obj) - assignment operator" << endl;
            return *this;
        }

        virtual void setCount(int count) { this->count = count; }

        virtual int getCount() { return count; }

        virtual void setHealth( float nhealth) { this->health = nhealth; }

        virtual float getHealth() { return health; }

        virtual void setType(string type) { this->type = type; }

        virtual string getType() { return type; }

        virtual void setId(int id) { this->id = id; }

        virtual int getId() { return id; }

        virtual void setStatus(string status) { this->status = status; }

        virtual void changeStatus() {
            if (getHealth() < GIRAFFE_THRESHOLD && getStatus() == LIVE) {
                cout << "Giraffe id: " << getId() << " status changed from: " << getStatus();
                setStatus(DEAD);
                cout <<  " to: " << getStatus() << endl;
            } else {
                cout << "Giraffe id: " << getId() << " No change to status" << endl; 
            } 
            return;
        }

        virtual float getRnum() {
            return (this->get_g_rnum());
        }

        virtual string getStatus() { return status; }

        virtual void getZooStatus() {
            cout << endl << "---------------------" << endl;
            cout << "Number of Giraffe's's in zoo:  " << count << endl;
            cout << "---------------------" << endl;
            return;
        }
};

void adjustAllAnimalHealthDownWrapper(animal *aptr) {

    cout << "** An hour has passed so adjusting health of all animals down... **" << endl;

    cout << "-----------------------------------" << endl;
    const vector<shared_ptr<animal>>& zoo = aptr->getContainer();

    for (vector<shared_ptr<animal>>::const_iterator it = zoo.begin();
                                                             it != zoo.end(); it++) {
        (*it)->adjustHealthDown();

        /*
         * Reset the status to reflect the changed health
        */
        (*it)->changeStatus();
    }
    return;
}

void printVectorContentsWrapper(animal *aptr) {

    const vector<shared_ptr<animal>>& zoo = aptr->getContainer();
    cout << "-----------------------------------" << endl;

    for (vector<shared_ptr<animal>>::const_iterator it = zoo.begin();
                                                     it != zoo.end(); it++) { 
        (*it)->printInstance();
    }
    return;
}

void feedAllAnimalsWrapper(animal *aptr) {

    cout << "Feeding animals..." << endl;
    cout << "-----------------------------------" << endl;

    /*
     * Get a read only reference to the zoo container.
    */
    const vector<shared_ptr<animal>>& zoo = aptr->getContainer();

    /*
     * Regenerate the three feed random numbers and update all instances 
     * in vector via resetFeedRandomNumbers()
    */
    aptr->resetFeedRandomNumbers();

    /*
     * All instances now have the required data for us to implement feeding
    */
    for (vector<shared_ptr<animal>>::const_iterator it = zoo.begin();
                                                    it != zoo.end(); it++) { 
        (*it)->feedAnimal();

        /*
         * Reset the status as animals have been fed
        */
        (*it)->changeStatus();
    }
    return;
}


// keep linker happy for static variables
int animal::idx=0;
int monkey::count = 0;
int giraffe::count = 0;
int elephant::count = 0;

int main(int argc, char **argv) {
    cout << "Entered zoo...." << endl;

    // Use different ptr for each animal for better readability
    animal   *eptr;
    animal   *mptr;
    animal   *gptr;
    elephant e;
    animal   *aptr = &e;
    int idx = 0;

    // Populate the zoo with 15 animals (five of each)

    for (int i=0; i < 5; i++) { 
        mptr = new monkey(idx);
        aptr->loadVector(mptr);

        idx = aptr->getIdx();
        gptr = new giraffe(idx);
        aptr->loadVector(gptr);

        idx = aptr->getIdx();
        eptr = new elephant(idx);
        aptr->loadVector(eptr);
        idx = aptr->getIdx();
    }

    eptr->getZooStatus();
    mptr->getZooStatus();
    gptr->getZooStatus();

    cout << "================================================" << endl;
    cout << "Zoo vector populated with <" << aptr->getVectorSize() << "> animals." << endl;
    cout << "================================================" << endl;

    cout << endl;
    cout << endl;

    if (eptr->get_m_rnum() == -1) {
        cout << 
        "** rnumFeed is -1 as the animals are yet to be fed! **"
        << endl;
        cout << endl;
    }

    cout << "Printing vector initial contents...." << endl;
    printVectorContentsWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    feedAllAnimalsWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    cout << "Printing vector contents...." << endl;
    printVectorContentsWrapper(aptr);

    cout << endl;
    cout << endl;
    feedAllAnimalsWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    feedAllAnimalsWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);


    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    adjustAllAnimalHealthDownWrapper(aptr);

    cout << endl;
    cout << endl;
    feedAllAnimalsWrapper(aptr);

    cout << endl;
    cout << endl;
    feedAllAnimalsWrapper(aptr);

    cout << endl;
    cout << endl;
    cout << "Printing vector contents...." << endl;
    printVectorContentsWrapper(aptr);

    return 0;
}
